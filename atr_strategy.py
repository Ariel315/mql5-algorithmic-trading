# -*- coding: utf-8 -*-
"""atr_strategy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12RqrxXYoZ3fTme8VTqfs-7V09JyPjosw
"""

#property strict
#include <Trade/Trade.mqh>
CTrade trade;
input double SL = 1.0;
input double TP = 1.0;
input int ATR1 = 1;
input int ATR2 = 1000;
input double X = 2.0;
MqlRates bar[];
int atr1;
double atr1_values[];
int atr2;
double atr2_values[];

int OnInit()
{

   atr1 = iATR(_Symbol, _Period, ATR1);
   if(atr1 == INVALID_HANDLE){
      Print("error ATR");
      return INIT_FAILED;
   }

   atr2 = iATR(_Symbol, _Period, ATR2);
   if(atr2 == INVALID_HANDLE){
      Print("error ATR");
      return INIT_FAILED;
   }

   return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{

   if(atr1 != INVALID_HANDLE)
      IndicatorRelease(atr1);

   if(atr2 != INVALID_HANDLE)
      IndicatorRelease(atr2);
}

void OnTick()
{
   static datetime lastTradeBarTime = 0;
   ArraySetAsSeries(bar, true);
   ArraySetAsSeries(atr1_values, true);
   ArraySetAsSeries(atr2_values, true);
   CopyRates(_Symbol, _Period, 0, 3, bar);
   CopyBuffer(atr1, 0, 0, 3, atr1_values);
   CopyBuffer(atr2, 0, 0, 3, atr2_values);

   if (PositionsTotal() == 0 && bar[1].close < bar[2].low && atr1_values[1] > atr2_values[1] * X && bar[0].time != lastTradeBarTime) {
      double stopLoss = bar[1].close - (SL * atr1_values[1]);
      double takeProfit = bar[1].close + (TP * atr1_values[1]);
      trade.Buy(1.0, _Symbol, bar[1].close, stopLoss, takeProfit);
      lastTradeBarTime = bar[0].time;
      Print("Orden de compra ejecutada con SL: ", stopLoss, " y TP: ", takeProfit);
   }
}