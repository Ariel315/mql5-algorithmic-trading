# -*- coding: utf-8 -*-
"""bollinger_sma_auto_trader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15WTwi65ajL5AXuaPR-Ftb6O_3ZqDOegu
"""

#property strict
input int BB = 6;
input int SMA = 6;
#include <Trade/Trade.mqh>
CTrade trade;
int bollinger_h;
double bollinger_up[];
double bollinger_down[];
double bollinger_sma[];  // Corregido: Se definió correctamente el array para la SMA de las bandas de Bollinger
int sma;
double sma_arr[];
MqlRates bar[];

int OnInit()
{
   bollinger_h = iBands(_Symbol, _Period, BB, 0, 2, PRICE_CLOSE);
   if(bollinger_h == INVALID_HANDLE){
      Print("error indicador");
      return INIT_FAILED;
   }

   sma = iMA(_Symbol, _Period, SMA, 0, MODE_SMA, PRICE_CLOSE);
   if(sma == INVALID_HANDLE){
      Print("error SMA 10");
      return INIT_FAILED;
   }

   return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{
   if(bollinger_h != INVALID_HANDLE)
      IndicatorRelease(bollinger_h);

   if(sma != INVALID_HANDLE)
      IndicatorRelease(sma);
}

void OnTick()
{
   static datetime lastTradeBarTime = 0; // Almacena el tiempo de la última barra donde se hizo una compra

   ArraySetAsSeries(bollinger_up, true);
   ArraySetAsSeries(bollinger_down, true);
   ArraySetAsSeries(bollinger_sma, true);
   ArraySetAsSeries(sma_arr, true);
   ArraySetAsSeries(bar, true);

   CopyBuffer(bollinger_h, 1, 0, 3, bollinger_up);    // Banda superior
   CopyBuffer(bollinger_h, 2, 0, 3, bollinger_down);  // Banda inferior
   CopyBuffer(bollinger_h, 0, 0, 3, bollinger_sma);   // Media de Bollinger
   CopyBuffer(sma, 0, 0, 3, sma_arr);  // SMA de 10 períodos
   CopyRates(_Symbol, _Period, 0, 3, bar);

   if (PositionsTotal() == 0 && bar[1].close < bollinger_down[1] && bar[1].time != lastTradeBarTime) {
      trade.Buy(1.0, _Symbol);
      lastTradeBarTime = bar[1].time; // Guarda la hora de la barra en la que se hizo la compra
      Print("Orden de compra ejecutada.");
   }

   if (PositionsTotal() > 0 && bar[1].close > sma_arr[1]) {
      trade.PositionClose(_Symbol);
      Print("Orden de cierre ejecutada.");
   }
}